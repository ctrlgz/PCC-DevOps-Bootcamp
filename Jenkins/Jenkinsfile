pipeline {
    agent {label 'ptyhon-todo'}

    environment {
        REPO_URL = 'https://github.com/ctrlgz/PCC-DevOps-Bootcamp'
        REPO_DIR = '/home/ubuntu/PCC-DevOps-Bootcamp'
        DOCKER_IMAGE = 'clgtrrz/pcc-python-todo-sample-app'
        DOCKER_TAG = "${currentBuild.number}"
        DOCKER_LATEST_TAG = 'latest'
    }
	   stages {
	   // Update the code by checking out the latest updates from the remote repository
        stage('Checkout') {
            steps {
                dir("${REPO_DIR}") {
                    git branch: 'master', url: "${REPO_URL}"
                }
            }
        }
        // Build the docker image
        stage('Build Docker Image') {
            steps {
                dir("${REPO_DIR}/Jenkins/Python-ToDo") {
                    sh 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
                    sh 'docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:${DOCKER_LATEST_TAG}'
                }
            }
        }
				// Push the docker image into a remote artifactory or image repository
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh 'echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin'
                        sh 'docker push ${DOCKER_IMAGE}:${DOCKER_TAG}'
                        sh 'docker push ${DOCKER_IMAGE}:${DOCKER_LATEST_TAG}'
                    }
                }
            }
				// Deploy the docker container into the server
        stage('Deploy to AWS EC2') {
            steps {
                script {
                     sh 'docker run -p 5000:5000 -e H1_COLOR=green -d ${DOCKER_IMAGE}:${DOCKER_TAG}'
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            sh 'docker system prune -af'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
